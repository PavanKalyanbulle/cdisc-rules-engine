name: Build Binary
on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      name:
        required: true
        type: string
jobs:
  build:
    runs-on: ${{ inputs.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python environment
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt-get update
          sudo apt-get install -y python3.9 python3.9-dev python3.9-distutils

      - name: Set up pip
        run: |
          curl -sS https://bootstrap.pypa.io/get-pip.py | sudo python3.9
          sudo python3.9 -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          sudo python3.9 -m pip install -r requirements.txt
      - name: Build Binary (Linux/Mac)
        if: runner.os != 'Windows'
        run: pyinstaller --onedir --contents-directory "." core.py --dist ./dist/output/${{ inputs.name }}  --add-data=$pythonLocation/lib/python3.9/site-packages/xmlschema/schemas:xmlschema/schemas --add-data=resources/cache:resources/cache --add-data=resources/templates:resources/templates --add-data=resources/schema:resources/schema
      - name: Build Binary (Windows)
        if: runner.os == 'Windows'
        run: pyinstaller --onedir --contents-directory "." core.py --dist ./dist/output/${{ inputs.name }} --contents-directory "." --add-data="$env:pythonLocation\Lib\site-packages\xmlschema\schemas;xmlschema/schemas" --add-data="resources/cache;resources/cache" --add-data="resources/templates;resources/templates" --add-data="resources/schema;resources/schema"
      - name: Archive Binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.name }}
          path: dist/output/${{ inputs.name }}/
      - name: Test Binary help command
        run: |
          cd dist/output/${{ inputs.name }}/core
          if [ "${{ runner.os }}" = "Windows" ]; then
            if ./core.exe --help; then echo "test passed"; else echo "test failed"; exit 1; fi
          else
            chmod +x core
            if ./core --help; then echo "test passed"; else echo "test failed"; exit 1; fi
          fi
        shell: bash
      - name: Test Binary test-validate command
        run: |
          cd dist/output/${{ inputs.name }}/core
          if [ "${{ runner.os }}" = "Windows" ]; then
            ./core.exe test-validate
          else
            chmod +x core
            chmod -R 755 .
            chmod -R +r resources/
            ./core test-validate
          fi
          if [ $exit_code -eq 0 ]; then
            echo "Test validate succeeded"
          else
            echo "Test validate failed with exit code $exit_code"
          fi
        shell: bash
      - name: Test pyreadstat
        run: |
          cd dist/output/${{ inputs.name }}/core
          if [ "${{ runner.os }}" = "Windows" ]; then
            if ./core.exe test-pyreadstat; then echo "test passed"; else echo "test failed"; exit 1; fi
          else
            chmod +x core
            if ./core test-pyreadstat; then echo "test passed"; else echo "test failed"; exit 1; fi
          fi
        shell: bash
