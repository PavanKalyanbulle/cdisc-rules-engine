name: Build Binary

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      name:
        required: true
        type: string
jobs:
  build:
    runs-on: ${{ inputs.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        id: pysetup
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
          pip install -r requirements.txt
      - name: Build Binary (Linux/Mac)
        if: runner.os != 'Windows'
        run: |
          # Get package names for recursive metadata
          METADATA_FLAGS=$(pip list --format=freeze | cut -d'=' -f1 | sed 's/^/--recursive-copy-metadata /' | tr '\n' ' ')

          READSTAT_PATH=$(python -c 'import pyreadstat, os; print(os.path.dirname(pyreadstat.__file__))')

          pyinstaller core.py --dist ./dist/output/${{ inputs.name }} \
            $METADATA_FLAGS \
            --hidden-import=pyreadstat._readstat_writer \
            --hidden-import=pyreadstat.pyreadstat \
            --collect-all pyreadstat \
            --copy-metadata pyreadstat \
            --add-binary="$READSTAT_PATH/_readstat_writer.*.so:pyreadstat" \
            --add-binary="$READSTAT_PATH/pyreadstat.*.so:pyreadstat" \
            --add-data=$pythonLocation/lib/python3.9/site-packages/xmlschema/schemas:xmlschema/schemas \
            --add-data=resources/cache:resources/cache \
            --add-data=resources/templates:resources/templates \
            --add-data=resources/schema:resources/schema \
            --noconfirm \
            --clean
      - name: Build Binary (Windows)
        if: runner.os == 'Windows'
        run: |
          # Get clean package names and join them properly for a single command
          $METADATA_FLAGS = (pip list --format=freeze | ForEach-Object { ($_ -split '==')[0].Trim() } | ForEach-Object { "--recursive-copy-metadata $_" }) -join ' '

          $READSTAT_PATH = python -c "import pyreadstat, os; print(os.path.dirname(pyreadstat.__file__))"

          # Use the string directly without backticks between arguments
          pyinstaller core.py --dist ./dist/output/${{ inputs.name }} $METADATA_FLAGS --hidden-import=pyreadstat._readstat_writer --hidden-import=pyreadstat.pyreadstat --collect-all pyreadstat --copy-metadata pyreadstat --add-binary="$READSTAT_PATH\_readstat_writer.pyd;pyreadstat" --add-binary="$READSTAT_PATH\pyreadstat.pyd;pyreadstat" --add-data="$env:pythonLocation\Lib\site-packages\xmlschema\schemas;xmlschema/schemas" --add-data="resources/cache;resources/cache" --add-data="resources/templates;resources/templates" --add-data="resources/schema;resources/schema" --noconfirm --clean
      - name: Archive Binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.name }}
          path: dist/output/${{ inputs.name }}/core/
      - name: Test Binary help command
        run: |
          cd dist/output/${{ inputs.name }}/core
          if [ "${{ runner.os }}" = "Windows" ]; then
            if ./core.exe --help; then echo "test passed"; else echo "test failed"; exit 1; fi
          else
            chmod +x core
            if ./core --help; then echo "test passed"; else echo "test failed"; exit 1; fi
          fi
        shell: bash
      - name: Test Binary test-validate command
        run: |
          cd dist/output/${{ inputs.name }}/core
          if [ "${{ runner.os }}" = "Windows" ]; then
            if ./core.exe test-validate; then echo "test passed"; else echo "test failed"; exit 1; fi
          else
            chmod +x core
            if ./core test-validate; then echo "test passed"; else echo "test failed"; exit 1; fi
          fi
        shell: bash
      - name: Test pyreadstat
        run: |
          cd dist/output/${{ inputs.name }}/core
          if [ "${{ runner.os }}" = "Windows" ]; then
            if ./core.exe test-pyreadstat; then echo "test passed"; else echo "test failed"; exit 1; fi
          else
            chmod +x core
            if ./core test-pyreadstat; then echo "test passed"; else echo "test failed"; exit 1; fi
          fi
        shell: bash
