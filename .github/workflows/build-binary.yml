name: Build Binary

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      name:
        required: true
        type: string
jobs:
  build:
    runs-on: ${{ inputs.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        id: pysetup
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
          pip install -r requirements.txt
      - name: Build Binary (Linux/Mac)
        if: runner.os != 'Windows'
        run: |
          READSTAT_PATH=$(python -c 'import pyreadstat, os; print(os.path.dirname(pyreadstat.__file__))')
          pyinstaller core.spec \
            --clean \
            --noconfirm \
            --distpath ./dist/output/${{ inputs.name }}

      - name: Build Binary (Windows)
        if: runner.os == 'Windows'
        run: |
          $READSTAT_PATH = python -c "import pyreadstat, os; print(os.path.dirname(pyreadstat.__file__))"
          pyinstaller core.spec `
            --clean `
            --noconfirm `
            --distpath ./dist/output/${{ inputs.name }}
      - name: Archive Binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.name }}
          path: dist/output/${{ inputs.name }}/core/
      - name: Test Binary help command
        run: |
          cd dist/output/${{ inputs.name }}/core
          if [ "${{ runner.os }}" = "Windows" ]; then
            if ./core.exe --help; then echo "test passed"; else echo "test failed"; exit 1; fi
          else
            chmod +x core
            if ./core --help; then echo "test passed"; else echo "test failed"; exit 1; fi
          fi
        shell: bash
      - name: Test Binary test-validate command
        run: |
          cd dist/output/${{ inputs.name }}/core
          if [ "${{ runner.os }}" = "Windows" ]; then
            ./core.exe test-validate
            exit_code=$?
          else
            chmod +x core
            chmod -R 755 .
            chmod -R +r _internal/resources/
            ./core test-validate
            exit_code=$?
          fi

          if [ $exit_code -eq 0 ]; then
            echo "Test validate succeeded"
          else
            echo "Test validate failed with exit code $exit_code"
            echo "Contents of cache directory:"
            ls -la resources/cache/
            exit $exit_code
          fi
        shell: bash
      - name: Test pyreadstat
        run: |
          cd dist/output/${{ inputs.name }}/core
          if [ "${{ runner.os }}" = "Windows" ]; then
            if ./core.exe test-pyreadstat; then echo "test passed"; else echo "test failed"; exit 1; fi
          else
            chmod +x core
            if ./core test-pyreadstat; then echo "test passed"; else echo "test failed"; exit 1; fi
          fi
        shell: bash
